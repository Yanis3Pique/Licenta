@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewBag.Title = "Create Delivery";
    var totalWeight = ViewBag.TotalWeightCapacity;
    var totalVolume = ViewBag.TotalVolumeCapacity;
    var availableOrders = ViewBag.AvailableOrders as List<Order>;
    var availableDrivers = ViewBag.AvailableDrivers as List<ApplicationUser>;
    var availableVehicles = ViewBag.AvailableVehicles as List<Vehicle>;
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}
@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

<!-- Capacity progress container -->
<div id="capacity-progress" data-total-weight="@totalWeight" data-total-volume="@totalVolume" class="mb-3">
    <div class="mb-1">Weight: <span id="weightValue">0 / @totalWeight kg</span></div>
    <div class="progress mb-2">
        <div id="weightProgress" class="progress-bar bg-primary" role="progressbar" style="width: 0%;"></div>
    </div>
    <div class="mb-1">Volume: <span id="volumeValue">0 / @totalVolume m³</span></div>
    <div class="progress">
        <div id="volumeProgress" class="progress-bar bg-info" role="progressbar" style="width: 0%;"></div>
    </div>
</div>

<form method="post" asp-action="CreateDelivery">
    <div class="mb-3">
        <label for="driverSelect">Select Driver:</label>
        <select id="driverSelect" name="driverId" class="form-control">
            @foreach (var driver in availableDrivers)
            {
                <option value="@driver.Id">@driver.UserName</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="vehicleSelect">Select Vehicle:</label>
        <select id="vehicleSelect" name="vehicleId" class="form-control">
            @foreach (var vehicle in availableVehicles)
            {
                <option value="@vehicle.Id">
                    @vehicle.Brand @vehicle.Model (@vehicle.RegistrationNumber)
                </option>
            }
        </select>
    </div>

    <div class="mb-3">
        <h4>Available Orders</h4>
        @foreach (var order in availableOrders)
        {
            <div class="form-check">
                <input type="checkbox"
                       class="form-check-input order-checkbox"
                       name="selectedOrderIds"
                       value="@order.Id"
                       data-weight="@order.Weight"
                       data-volume="@order.Volume"
                       data-latitude="@order.Latitude"
                       data-longitude="@order.Longitude"
                       id="order_@order.Id" />
                <label class="form-check-label" for="order_@order.Id">
                    Order #@order.Id - @order.Address <br />
                    <small>@order.Weight kg, @order.Volume m³</small>
                </label>
            </div>
        }
    </div>
    <button type="submit" id="createDeliveryButton" class="btn btn-primary">Create Delivery</button>
</form>

<div id="map" style="width: 100%; height: 500px; margin-top: 20px;"></div>

@section Scripts {
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Get capacity container values
            var progressContainer = document.getElementById("capacity-progress");
            var totalWeight = parseFloat(progressContainer.getAttribute("data-total-weight")) || 1;
            var totalVolume = parseFloat(progressContainer.getAttribute("data-total-volume")) || 1;
            var createButton = document.getElementById("createDeliveryButton");

            // Update capacity visuals and map markers
            function updateCapacityVisuals() {
                var checkboxes = document.querySelectorAll(".order-checkbox");
                var usedWeight = 0, usedVolume = 0;
                checkboxes.forEach(function (checkbox) {
                    if (checkbox.checked) {
                        usedWeight += parseFloat(checkbox.getAttribute("data-weight")) || 0;
                        usedVolume += parseFloat(checkbox.getAttribute("data-volume")) || 0;
                    }
                });
                var weightPerc = Math.min((usedWeight / totalWeight) * 100, 100);
                var volumePerc = Math.min((usedVolume / totalVolume) * 100, 100);
                document.getElementById("weightProgress").style.width = weightPerc + "%";
                document.getElementById("volumeProgress").style.width = volumePerc + "%";
                document.getElementById("weightValue").innerText = usedWeight.toFixed(1) + " / " + totalWeight + " kg";
                document.getElementById("volumeValue").innerText = usedVolume.toFixed(1) + " / " + totalVolume + " m³";

                // Disable the create button if capacity is exceeded
                createButton.disabled = (usedWeight > totalWeight || usedVolume > totalVolume);

                // Update map markers accordingly
                updateMapMarkers();
            }

            // Attach change event to each order checkbox
            var orderCheckboxes = document.querySelectorAll(".order-checkbox");
            orderCheckboxes.forEach(function (checkbox) {
                checkbox.addEventListener("change", updateCapacityVisuals);
            });
            updateCapacityVisuals();

            // Initialize the map (default center set arbitrarily, adjust as needed)
            var map = L.map('map').setView([45.9432, 24.9668], 7);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            var markers = [];
            function updateMapMarkers() {
                // Remove existing markers
                markers.forEach(function (marker) {
                    map.removeLayer(marker);
                });
                markers = [];

                orderCheckboxes.forEach(function (checkbox) {
                    var lat = parseFloat(checkbox.getAttribute("data-latitude"));
                    var lng = parseFloat(checkbox.getAttribute("data-longitude"));
                    if (!isNaN(lat) && !isNaN(lng)) {
                        // Use red icon if selected, blue if not
                        var iconUrl = checkbox.checked
                            ? "https://cdn-icons-png.flaticon.com/512/1828/1828665.png"
                            : "https://cdn-icons-png.flaticon.com/512/1828/1828843.png";
                        var icon = L.icon({
                            iconUrl: iconUrl,
                            iconSize: [25, 41],
                            iconAnchor: [12, 41]
                        });
                        var marker = L.marker([lat, lng], { icon: icon })
                            .addTo(map)
                            .bindPopup("Order #" + checkbox.value);
                        markers.push(marker);
                    }
                });
            }
            updateMapMarkers();
        });
    </script>
}
